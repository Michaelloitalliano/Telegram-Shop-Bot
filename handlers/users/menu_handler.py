# from blockcypher import from_satoshis
import blockcypher

from loader import dp, bot
from aiogram.types import Message, CallbackQuery
from aiogram.dispatcher import FSMContext
from keyboards.default import reset_payment_keyboard, menu_start
from keyboards.inline import create_payment_button, create_payment_callback, return_chose_payment, return_check_payment, close, fuck
from utils.bitcoin_payment import Payment, NotConfirmed, NotPaymentFound

from utils.db_api.db_commands import select_user, get_bot_settings, get_all_user_referral, update_user_balance
from utils.create_text_message import return_referral_text, return_profile_text, return_payment_text, return_zver_payment_text
from utils.qiwi_module import QSystem, FuckingCard
from utils.zverpay import ZverPay
from utils.btc_price import Price
from utils.UAH import Course

from filters.is_admin import IsAdmin

from django_project.telegrambot.usersmanage.models import *
from django.template.defaultfilters import date as djdate

from random import randint
import math
from os.path import isdir, join as join_dirs

@dp.message_handler(text='üîÑ–ó–∞–º–µ–Ω–∞')
async def change_handler(message: Message, state: FSMContext):
    await state.set_state('write_log')
    await message.answer('üí°–í–≤–µ–¥–∏—Ç–µ <b>–ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –ª–æ–≥(–∞)–æ–≤</b> –¥–ª—è –∑–∞–º–µ–Ω—ã:', reply_markup=reset_payment_keyboard())
# –ü–†–û–î–û–õ–ñ–ï–ù–ò–ï –í SHOP_PRODUCT_HANDLER.py


@dp.message_handler(text='üë§–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞')
async def referral_system_open(message: Message):
    count = await get_all_user_referral(message.from_user.id)
    user = await select_user(message.from_user.id)
    bot_user = await dp.bot.get_me()
    deep_link = f'https://t.me/{bot_user.username}?start={message.from_user.id}'
    if user.referral_percent is not None:
        await message.answer(return_referral_text(user.referral_percent, deep_link, count))
    else:
        settings = await get_bot_settings()
        percent = settings.referral_percent
        await message.answer(return_referral_text(percent, deep_link, count))


@dp.message_handler(text='üòé–ü—Ä–æ—Ñ–∏–ª—å')
async def profile_handler(message: Message):
    user = await select_user(message.from_user.id)
    user_id = message.from_user.id
    username = message.from_user.username
    await message.answer(return_profile_text(user_id, username, user.balance, user.count_buy))


@dp.message_handler(text='üí∞–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å')
async def chose_payment_handler(message: Message):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è', reply_markup=return_chose_payment())


@dp.callback_query_handler(lambda —Å: —Å.data.startswith('pay '))
async def payment_fuck_handler(call: CallbackQuery, state: FSMContext):
    await call.answer()
    system = PaySystem.objects.filter(id=call.data.split(" ")[1]).first()
    if system==None:
        return await call.answer("–ü–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞.")
    await state.set_state('wait_amount')
    text = f"–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:\n{system.props}\n\n"\
            "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–ª–∞—Ç–µ–∂ 500 —Ä—É–±–ª–µ–π.\n"\
            "<b>–æ—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É —Å—É–º–º—É, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–æ—Ç–∞</b>, –≤ —Ä—É–±–ª—è—Ö (—á–∏—Å–ª–æ–º).\n"\
            f"‚ùóÔ∏è –ü—Ä–∏ –æ–ø–ª–∞—Ç–µ —á–µ—Ä–µ–∑ QIWI, –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –ø–ª–∞—Ç–µ–∂—É –¥–æ–±–∞–≤—å—Ç–µ –≤–∞—à ID: {call.from_user.id}"
    await call.message.answer(text, reply_markup=reset_payment_keyboard())

@dp.message_handler(state='wait_amount')
async def get_amount_handler(message: Message, state: FSMContext):
    if message.text != 'üí∞–û—Ç–º–µ–Ω–∞':
        amount = message.text
        if amount==None:
            return await message.answer("<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É —Å—É–º–º—É (—á–∏—Å–ª–æ–º)</b>.\n–î–ª—è –æ—Ç–º–µ–Ω—ã –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.")
        if not amount.isdigit():
            return await message.answer("<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É —Å—É–º–º—É (—á–∏—Å–ª–æ–º)</b>.\n–î–ª—è –æ—Ç–º–µ–Ω—ã –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.")
        amount = int(amount)
        if amount>25000:
            await state.finish()
            return message.answer("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º–µ–Ω—å—à–µ 25000 —Ä—É–±. –∏ –±–æ–ª—å—à–µ 500 —Ä—É–±.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã.")
        elif amount<500:
            await state.finish()
            return message.answer("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º–µ–Ω—å—à–µ 25000 —Ä—É–±. –∏ –±–æ–ª—å—à–µ 500 —Ä—É–±.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã.")
        user = await select_user(message.from_user.id)
        await state.set_state('wait_screenshot')
        await state.update_data({'amount':amount})
        return await message.answer(f"<b>–û–∂–∏–¥–∞–µ–º: {amount} —Ä—É–±.</b>\n\n–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–ª–∞—Ç–µ–∂–∞, –¥–ª—è –∑–∞—á–∏—Å–ª–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É <b>—Å–∫—Ä–∏–Ω—à–æ—Ç –ø–ª–∞—Ç–µ–∂–∞</b> (–∫–∞—Ä—Ç–∏–Ω–∫–æ–π).\n–î–ª—è –æ—Ç–º–µ–Ω—ã –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.")
    else:
        await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏ –æ–ø–ª–∞—Ç—É', reply_markup=menu_start())
        await state.finish()

@dp.message_handler(state='wait_screenshot',content_types=['text','photo'])
async def get_screenshot_handler(message: Message, state: FSMContext):
    if message.text != 'üí∞–û—Ç–º–µ–Ω–∞':
        if message.content_type!="photo":
            return await message.answer("–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–ª–∞—Ç–µ–∂–∞, –¥–ª—è –∑–∞—á–∏—Å–ª–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É <b>—Å–∫—Ä–∏–Ω –ø–ª–∞—Ç–µ–∂–∞ —Å —Å—É–º–º–æ–π</b>(–∫–∞—Ä—Ç–∏–Ω–∫–æ–π), —É–∫–∞–∑–∞–Ω–Ω–æ–π –≤ —Ä—É–±–ª—è—Ö (—á–∏—Å–ª–æ–º), <b>–æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º</b>.\n–î–ª—è –æ—Ç–º–µ–Ω—ã –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.")
        data = await state.get_data()
        amount = int(data['amount'])
        if amount>25000:
            return await state.finish()
        elif amount<500:
            return await state.finish()
        user = await select_user(message.from_user.id)
        await message.answer(f"–ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±—ã–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞, –æ–∂–∏–¥–∞–π—Ç–µ –∑–∞—á–∏—Å–ª–µ–Ω–∏—è!", reply_markup=menu_start())
        await state.finish()
        await bot.send_photo("CHANNEL_ID", message.photo[-1].file_id, caption=f"{amount}\nUser: {user.username} (ID: {user.user_id})", reply_markup=fuck(user.user_id, amount))
        if user.referral != 0:
            user_referral = await select_user(user.referral)
            percent = await get_bot_settings()
            percent = percent.referral_percent
            if user_referral.referral_percent is not None:
                percent = user_referral.referral_percent
            balance_add = math.floor(amount//100*percent)
            await update_user_balance(user.referral, balance_add)
            try:
                await bot.send_message(user_id=user.referral, text=f'–û—Ç—á–∏—Å–ª–µ–Ω–∏–µ –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞: {balance_add}')
            except:
                pass
    else:
        await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏ –æ–ø–ª–∞—Ç—É', reply_markup=menu_start())
        await state.finish()


@dp.callback_query_handler(lambda x: x.data.startswith("fuck"))
async def change_call_handler(call: CallbackQuery):
    data = call.data.split(" ")
    if len(data)!=3:
        return await call.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã: /add(zam) {user_id} {—Å—É–º–º–∞}", True)
    u = User.objects.filter(user_id=data[1]).first()
    if u==None:
        return await call.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {data[1]} –Ω–µ –Ω–∞–π–¥–µ–Ω!", True)
    u.balance-=u.balance*2
    u.save()
    try:
        text = f"–í —Å–≤—è–∑–∏ —Å –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ–º —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—É–º–º—ã –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å —Ä–µ–∞–ª—å–Ω—ã–º –ø–ª–∞—Ç–µ–∂–æ–º, —Å –≤–∞—Å –≤–∑–∏–º–∞–µ—Ç—Å—è —à—Ç—Ä–∞—Ñ –≤ –≤–∏–¥–µ –¥–≤—É—Ö–∫—Ä–∞—Ç–Ω–æ–≥–æ —Å–ø–∏—Å–∞–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ —Å –ø—Ä–æ—Ñ–∏–ª—è."
        await bot.send_message(u.user_id, text)
        await call.answer(f"–ë–∞–ª–∞–Ω—Å –ø–ª–æ—Ö–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ —Ç–µ–ø–µ—Ä—å {u.balance}.\n–ü–æ—à—ë–ª –æ–Ω –¥–æ–º–æ–π!", True)
        # await call.message.delete()
    except Exception as ex:
        await call.answer(f"–ö–∞–∂–µ—Ç—Å—è, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞, –±–∞–ª–∞–Ω—Å –±—ã–ª —É–º–µ–Ω—å—à–µ–Ω!\n{repr(ex)}", True)


@dp.callback_query_handler(text_contains='zver')
async def zver_payment_balance_handler(call: CallbackQuery, state: FSMContext):
    await state.set_state('write_balance_zver')
    await state.update_data({"type":"ALL"})
    await call.message.answer('üí° –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Ä—É–±–ª—è—Ö (—á–∏—Å–ª–æ–º):', reply_markup=reset_payment_keyboard())

@dp.callback_query_handler(text_contains='zver_UA')
async def zver_payment_balance_handler(call: CallbackQuery, state: FSMContext):
    await state.set_state('write_balance_zver')
    await state.update_data({"type":"UA"})
    await call.message.answer('üí° –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Ä—É–±–ª—è—Ö (—á–∏—Å–ª–æ–º):', reply_markup=reset_payment_keyboard())


@dp.message_handler(state='write_balance_zver')
async def zver_payment_handler_two(message: Message, state: FSMContext):
    data = await state.get_data()
    if message.text.isdigit():
        if float(message.text)<500:
            await message.answer('–°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 500 —Ä—É–±–ª–µ–π\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã')
            return
        amount_rub = int(message.text)
        uah_api = Course()
        amount = uah_api.rub_uah(amount_rub)
        system = ZverPay()
        if data["type"]=="ALL":
            invoice, url = system.create_pay(amount, "RU")
        else:
            invoice, url = system.create_pay(amount, "UA")
        await message.answer('–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –º–µ–Ω—é', reply_markup=menu_start())
        await message.answer(return_zver_payment_text(amount_rub), reply_markup=create_payment_button(invoice, url))
        await state.finish()
    elif message.text == 'üí∞–û—Ç–º–µ–Ω–∞':
        await state.finish()
        await message.answer('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=menu_start())
    else:
        await message.answer('–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º –±–æ–ª—å—à–µ 500\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã')

@dp.callback_query_handler(text_contains='qiwi')
async def payment_balance_handler(call: CallbackQuery, state: FSMContext):
    await call.answer()
    qiwi_p2p = await get_qiwi()
    if qiwi_p2p==False:
        sett = await get_bot_settings()
        return await call.message.answer(sett.text_qiwi, reply_markup=close())
    await state.set_state('write_balance')
    await call.message.answer('üí° –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ –†–æ—Å—Å–∏–π—Å–∫–∏—Ö —Ä—É–±–ª—è—Ö:', reply_markup=reset_payment_keyboard())

@dp.message_handler(state='write_balance')
async def payment_handler_two(message: Message, state: FSMContext):
    if message.text.isdigit():
        # ADD
        if float(message.text)<500:
            await message.answer('–°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è Qiwi –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 500 —Ä—É–±–ª–µ–π\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã')
            return
        # END ADD
        qiwi_p2p = await get_qiwi()
        if qiwi_p2p==False:
            await state.finish()
            return await message.answer('–ë–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø–ª–∞—Ç–µ–∂–∏', reply_markup=menu_start())
        amount = round(float(message.text)+(randint(-99,0)/100),2)
        url = f"https://qiwi.com/payment/form/31873?amountFraction={str(round(amount-int(amount),2))[2:]}&currency=RUB&extra%5B%27account%27%5D={qiwi_p2p.card_num}&amountInteger={amount}&blocked%5B0%5D=account&blocked%5B1%5D=sum"
        await message.answer('–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –º–µ–Ω—é', reply_markup=menu_start())
        await message.answer(return_payment_text(qiwi_p2p, amount), reply_markup=create_payment_button(amount, url))
        await state.finish()
    elif message.text == 'üí∞–û—Ç–º–µ–Ω–∞':
        await state.finish()
        await message.answer('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=menu_start())
    else:
        await message.answer('–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º –±–æ–ª—å—à–µ 500\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã')

@dp.callback_query_handler(create_payment_callback.filter(name='check_pay'))
async def check_payment_handler(call: CallbackQuery, callback_data: dict):
    if "-" in callback_data.get('bill_id'):
        system = ZverPay()
        status, bill_ids = system.check_pay(callback_data.get('bill_id'))
        uah_api = Course()
        bill_ids = uah_api.uah_rub(int(bill_ids))
    else:
        qiwi_p2p = await get_qiwi()
        if qiwi_p2p==False:
            return await call.answer('–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ', True)
        bill_ids = float(callback_data.get('bill_id'))
        status = qiwi_p2p.check_pay(bill_ids)
    user = await select_user(call.from_user.id)
    if status:
        sum = round(bill_ids)
        await update_user_balance(user_id=call.message.chat.id, balance=sum)
        await call.message.delete()
        await call.message.answer(f'‚úÖ–ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {sum} —Ä—É–±')
        user = await select_user(call.from_user.id)
        Payment.objects.create(from_user=user, amount=sum, pay_id=bill_ids)
        if user.referral != 0:
            user_referral = await select_user(user.referral)
            percent = await get_bot_settings()
            percent = percent.referral_percent
            if user_referral.referral_percent is not None:
                percent = user_referral.referral_percent
            balance_add = math.floor(sum//100*percent)
            await update_user_balance(user.referral, balance_add)
            try:
                 await bot.send_message(user_id=user.referral, text=f'–û—Ç—á–∏—Å–ª–µ–Ω–∏–µ –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞: {balance_add}')
            except:
                pass
    else:
        await call.message.answer('üò°–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω')

@dp.callback_query_handler(text_contains='check_payment_btc', state='check_btc')
async def approve_btc_handler(call: CallbackQuery, state: FSMContext):
    await call.answer(cache_time=60)
    data = await state.get_data()
    payment = data.get('payment')
    try:
        payment.check_payment()
    except NotConfirmed:
        await call.message.answer('–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞, –Ω–æ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ\n\n–ü—Ä–æ–≤–µ—Ä—è—Ç—å –æ–ø–ª–∞—Ç—É –º–æ–∂–Ω–æ 1 —Ä–∞–∑ –≤ 60 —Å–µ–∫—É–Ω–¥')
        return
    except NotPaymentFound:
        await call.message.answer('–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞\n–ü—Ä–æ–≤–µ—Ä—è—Ç—å –æ–ø–ª–∞—Ç—É –º–æ–∂–Ω–æ 1 —Ä–∞–∑ –≤ 60 —Å–µ–∫—É–Ω–¥')
        return
    else:
        await call.message.answer('–ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω')
        await update_user_balance(call.from_user.id, payment.rub)
        await call.message.delete_reply_markup()
        user = await select_user(call.from_user.id)
        if user.referral != 0:
            user_referral = await select_user(user.referral)
            percent = await get_bot_settings()
            percent = percent.referral_percent
            if user_referral.referral_percent is not None:
                percent = user_referral.referral_percent
            balance_add = math.floor(payment.rub // 100 * percent)
            await update_user_balance(user.referral, balance_add)
            try:
                await bot.send_message(user_id=user.referral, text=f'–û—Ç—á–∏—Å–ª–µ–Ω–∏–µ –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞: {balance_add}')
            except:
                pass
    await state.finish()


@dp.callback_query_handler(text_contains='btc')
async def payment_balance_btc_handler(call: CallbackQuery, state: FSMContext):
    await call.answer()
    sett = await get_bot_settings()
    await call.message.answer(sett.text_btc, reply_markup=close())

price = Price()
@dp.message_handler(state='write_balance_btc')
async def payment_handler_btc_two(message: Message, state: FSMContext):
    if message.text != 'üí∞–û—Ç–º–µ–Ω–∞':
        settings = await get_bot_settings()
        amount = price.rub_sat(int(message.text)) + randint(5, 200)
        payment = Payment(amount=amount, rub=int(message.text))
        payment.create()

        await message.answer('–ú–µ–Ω—é', reply_markup=menu_start())
        show_amount = blockcypher.from_satoshis(payment.amount, 'btc')
        await message.answer(f'–û–ø–ª–∞—Ç–∏—Ç–µ {show_amount:.8f} –Ω–∞ –±–∏—Ç–∫–æ–∏–Ω –∞–¥—Ä–µ—Å <pre>{settings.address_btc}</pre>\n\nüí°–ü–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Å—Ç—Ä–æ–≥–æ —É–∫–∞–∑–∞–Ω–Ω—É—é —Å—É–º–º—É, –∏–Ω–∞—á–µ –ø–ª–∞—Ç–µ–∂ –Ω–µ –±—É–¥–µ—Ç –∑–∞—á–∏—Å–ª–µ–Ω\n\nüò°–î–ª—è –æ—Ç–º–µ–Ω—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ', parse_mode='HTML',
                             reply_markup=return_check_payment())
        await state.set_state('check_btc')
        await state.update_data(payment=payment)
    else:
        await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏ –æ–ø–ª–∞—Ç—É', reply_markup=menu_start())
        await state.finish()


@dp.callback_query_handler(text_contains='close_message', state='check_btc')
async def close_message_handler(call: CallbackQuery, state: FSMContext):
    await call.message.edit_text('–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞')
    await state.finish()


@dp.message_handler(text='üì•–ü–æ–º–æ—â—å')
async def help_text_handler(message: Message):
    settings = await get_bot_settings()
    if settings.help_text == '':
        await message.answer('–¢–µ–∫—Å—Ç –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º')
        return
    await message.answer(settings.help_text)



@dp.message_handler(IsAdmin(), commands=['add', 'zam'])
async def add_money(message: Message):
    data = message.text.split(" ")
    if len(data)!=3:
        return await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã: /add(zam) {user_id} {—Å—É–º–º–∞}")
    u = User.objects.filter(user_id=data[1]).first()
    if u==None:
        return await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {data[1]} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    money = data[2]
    if not money.isdigit():
        return await message.answer(f"–°—É–º–º–∞ {money} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º!")
    money=int(money)
    u.balance+=money
    u.save()
    try:
        if data[0]=="/add":
            text = f"–í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {money} —Ä—É–±–ª–µ–π!"
        elif data[0]=="/zam":
            text = f"–ë–∞–ª–∞–Ω—Å –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω –ø–æ –∑–∞–º–µ–Ω–µ –Ω–∞ {money} —Ä—É–±–ª–µ–π!"
        await bot.send_message(u.user_id, text)
        await message.answer(f"–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {data[1]} —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {money} —Ä—É–±–ª–µ–π!")
    except Exception as ex:
        await message.answer(f"–ö–∞–∂–µ—Ç—Å—è, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞, –±–∞–ª–∞–Ω—Å –±—ã–ª –ø–æ–ø–æ–ª–Ω–µ–Ω!\n{repr(ex)}")

@dp.callback_query_handler(lambda x: x.data.startswith("zam") or x.data.startswith("add"))
async def change_call_handler(call: CallbackQuery):
    # settings = await get_bot_settings()
    # if settings.admin_id!=message.from_user.id:
    #     return
    data = call.data.split(" ")
    if len(data)!=3:
        return await call.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã: /add(zam) {user_id} {—Å—É–º–º–∞}", True)
    u = User.objects.filter(user_id=data[1]).first()
    if u==None:
        return await call.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {data[1]} –Ω–µ –Ω–∞–π–¥–µ–Ω!", True)
    money = data[2]
    if not money.isdigit():
        return await call.answer(f"–°—É–º–º–∞ {money} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ü–∏—Ñ–µ—Ä–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º!", True)
    money=int(money)
    u.balance+=money
    u.save()
    Payment.objects.create(from_user=u, amount=money)
    try:
        text = f"–ë–∞–ª–∞–Ω—Å –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω –ø–æ –∑–∞–º–µ–Ω–µ –Ω–∞ {money} —Ä—É–±–ª–µ–π!"
        if data[0]=="add":
            text = f"–ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞, –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {money} —Ä—É–±–ª–µ–π!"
            if u.referral != 0:
                user_referral = await select_user(u.referral)
                percent = await get_bot_settings()
                percent = percent.referral_percent
                if user_referral.referral_percent is not None:
                    percent = user_referral.referral_percent
                balance_add = math.floor(money//100*percent)
                await update_user_balance(u.referral, balance_add)
                try:
                    await bot.send_message(user_id=u.referral, text=f'–û—Ç—á–∏—Å–ª–µ–Ω–∏–µ –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞: {balance_add}')
                except:
                    pass
            
        await bot.send_message(u.user_id, text)
        await call.answer(f"–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {data[1]} —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {money} —Ä—É–±–ª–µ–π!", True)
        await call.message.delete()
    except Exception as ex:
        await call.answer(f"–ö–∞–∂–µ—Ç—Å—è, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞, –±–∞–ª–∞–Ω—Å –±—ã–ª –ø–æ–ø–æ–ª–Ω–µ–Ω!\n{repr(ex)}", True)

def get_admins():
    settings = BotSettings.objects.first()
    return settings.admin_id.split("\r\n")


async def get_qiwi():
    qiwi = Qiwi.objects.filter(active=True).first()
    if qiwi==None:
        try:
            await bot.send_message(get_admins()[0], "–ê–∫–∫–∞—É–Ω—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, –æ–ø–ª–∞—Ç—ã –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –∞–∫–∫–∞—É–Ω—Ç—ã –≤ –∞–¥–º–∏–Ω–∫–µ.")
        except:
            pass
        return False
    wallet = FuckingCard(qiwi.token, qiwi.info, qiwi.card_num)
    return wallet


@dp.message_handler(IsAdmin(), commands=['stat',])
async def stat_handler(message: Message):
    await message.delete()
    week = datetime.datetime.now() - datetime.timedelta(days=7)
    allbuys = AllBuyProduct.objects.order_by('-date')
    stat = {}
    day_stat = {}
    week_text = ""
    for bough in allbuys.filter(date__gte=week):
        if "trafger" in bough.user.username.lower():
            continue
        date = f"{djdate(bough.date, 'd.m')}"
        if not date in day_stat:
            day_stat[date] = bough.sum
        else:
            day_stat[date] += bough.sum
    for day in day_stat:
        week_text+=f" - {day}: <code>{day_stat[day]}‚ÇΩ</code>\n"
    for bough in allbuys:
        if "trafger" in bough.user.username.lower():
            continue
        date = f"{djdate(bough.date, 'F, Y')}"
        if not date in stat:
            stat[date] = bough.sum
        else:
            stat[date] += bough.sum
    stat_text = "<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫—É–ø–æ–∫:</b>\n\n"
    i=0
    for month in stat:
        if i==0:
            stat_text += f"{month}: <code>{stat[month]}‚ÇΩ</code>\n{week_text}\n"
        else:
            stat_text+=f"{month}: <code>{stat[month]}‚ÇΩ</code>\n\n"
        i+=1
    await message.answer(stat_text, reply_markup=close())
