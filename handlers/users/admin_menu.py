from loader import dp, bot

from aiogram.dispatcher.filters.builtin import Command
from aiogram.types import CallbackQuery, Message
from aiogram.dispatcher import FSMContext

from utils.db_api import db_commands as command
from utils.create_text_message import count_product
from filters.is_admin import IsAdmin
import asyncio

from keyboards.default import shop_reset_buy, menu_start
from django_project.telegrambot.usersmanage.models import *


@dp.message_handler(IsAdmin(), Command('admin'))
async def admin_list_command_handler(msg: Message):
    await msg.answer('–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥\n'
                     '/send - —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏\n'
                     '/info - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –æ—Å—Ç–∞—Ç–∫–∞–º\n'
                     '/stat - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–ø–ª–∞—Ç\n'
                     '/add {user_id} - –≤—ã–¥–∞—Ç—å –±–∞–ª–∞–Ω—Å\n'
                     '/zam {user_id} - –≤—ã–¥–∞—Ç—å –∑–∞–º–µ–Ω—É (–±–∞–ª–∞–Ω—Å)\n'
                     '/find - –ø–æ–∏—Å–∫ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π –ø–æ –±–∞–∑–µ –∏ –ª–æ–≥–∞–º')


@dp.message_handler(IsAdmin(), Command('send'))
async def set_state_send_handler(msg: Message, state: FSMContext):
    await msg.answer('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏: ', reply_markup=shop_reset_buy())
    await state.set_state('enter_msg_send')


async def send_message_func(user_id, text):
    user = await command.get_all_user()
    count_god = 0
    for i in user:
        try:
            await bot.send_message(chat_id=i.user_id, text=text)
            count_god += 1
            await asyncio.sleep(.05)
        except:
            pass
    bad_sms = user.count() - count_god
    await bot.send_message(chat_id=user_id, text='–†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–∫–æ–Ω—á–µ–Ω–∞\n'
                                                 f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–º—Å: {count_god}\n'
                                                 f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–º—Å: {bad_sms}\n'
                                                 f'–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {user.count()}\n')


@dp.message_handler(state='enter_msg_send')
async def start_send_message_handler(msg: Message, state: FSMContext):
    await state.finish()
    if msg.text != 'üí¢–û—Ç–º–µ–Ω–∏—Ç—å':
        await msg.answer('–†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞! –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç—á–µ—Ç', reply_markup=menu_start())
        await send_message_func(msg.from_user.id, msg.text)
    else:
        await msg.answer('–î–µ–π—Å—Ç–≤–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–æ')


@dp.message_handler(IsAdmin(), Command('info'))
async def info_product_handler(msg: Message):
    text_info = '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –æ—Å—Ç–∞—Ç–∫–∞–º\n\n'
    for product in Product.objects.all():
            if product.subcategory.text_mode:
                text_info+=f"{product.name} | {len(product.product_this.splitlines())} —à—Ç.\n"
            else:
                text_info+=f"{product.name} | {len(LogLink.objects.filter(product=product))} —à—Ç.\n"
    await msg.answer(text_info)

